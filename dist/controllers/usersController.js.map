{"version":3,"sources":["../../controllers/usersController.js"],"names":["usersControllers","req","res","userEmail","body","email","userName","username","password","newId","allUsers","length","id","checkUser","helper","findFromDb","newUser","parcels","push","status","json","message","findUser","loggedIn","currentUser","userId","params","userParcels","error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEMA,gB;;;;;;;;AACN;qCACyBC,G,EAAKC,G,EAAK;AAC3B,gBAAIC,YAAYF,IAAIG,IAAJ,CAASC,KAAzB;AAAA,gBAAgCC,WAAWL,IAAIG,IAAJ,CAASG,QAApD;AAAA,gBAA8DC,WAAWP,IAAIG,IAAJ,CAASI,QAAlF;AACA,gBAAIC,QAAQC,kBAASA,kBAASC,MAAT,GAAkB,CAA3B,EAA8BC,EAA9B,GAAmC,CAA/C;AACA,gBAAMC,YAAYC,qBAAOC,UAAP,CAAkBL,iBAAlB,EAA4B,OAA5B,EAAqCP,SAArC,CAAlB;AACA,gBAAI,CAACU,SAAL,EAAgB;AACZ,oBAAIG,UAAU;AACVJ,wBAAIH,KADM;AAEVJ,2BAAOF,SAFG;AAGVI,8BAAUD,QAHA;AAIVE,8BAAUA,QAJA;AAKVS,6BAAS;AALC,iBAAd;AAOAP,kCAASQ,IAAT,CAAcF,OAAd;AACA,uBAAOd,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS;AADe,iBAArB,CAAP;AAGH,aAZD,MAYM;AACF,uBAAOnB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS;AADe,iBAArB,CAAP;AAGH;AACJ;AACD;;;;oCACoBpB,G,EAAKC,G,EAAK;AAC1B,mBAAOA,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBV,0BAAUA;AADc,aAArB,CAAP;AAGH;AACD;;;;8BACcT,G,EAAKC,G,EAAK;AACpB,gBAAIC,YAAYF,IAAIG,IAAJ,CAASC,KAAzB;AAAA,gBAAgCG,WAAWP,IAAIG,IAAJ,CAASI,QAApD;AACA,gBAAMc,WAAWR,qBAAOC,UAAP,CAAkBL,iBAAlB,EAA4B,OAA5B,EAAqCP,SAArC,CAAjB;AACA,gBAAImB,YAAYA,SAASd,QAAT,IAAqBA,QAArC,EAA+C;AAC3Cc,yBAASC,QAAT,GAAoB,IAApB;AACA,uBAAOrB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS,wBADe;AAExBG,iCAAaF;AAFW,iBAArB,CAAP;AAIH,aAND,MAMM;AACF,uBAAOpB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS;AADe,iBAArB,CAAP;AAGH;AACJ;AACD;;;;4CAC4BpB,G,EAAKC,G,EAAK;AAClC,gBAAIuB,SAASxB,IAAIyB,MAAJ,CAAWd,EAAxB;AACA,gBAAMU,WAAWR,qBAAOC,UAAP,CAAkBL,iBAAlB,EAA4B,IAA5B,EAAkCe,MAAlC,CAAjB;AACA,gBAAIH,QAAJ,EAAc;AACVpB,oBAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,6BAAS,+CADQ;AAEjBM,iCAAaL,SAASL;AAFL,iBAArB;AAIH,aALD,MAKM;AACFf,oBAAIkB,IAAJ,CAAS;AACLQ,2BAAO;AADF,iBAAT;AAGH;AACJ;;;;;;kBAEU5B,gB","file":"usersController.js","sourcesContent":["import allUsers from '../sampleDatabase/usersdb';\nimport helper from '../helpers/findFromDb';\n\nclass usersControllers {\n// this is to register a user\n    static registerUser (req, res) {\n        let userEmail = req.body.email, userName = req.body.username, password = req.body.password;\n        let newId = allUsers[allUsers.length - 1].id + 1;\n        const checkUser = helper.findFromDb(allUsers, 'email', userEmail);\n        if (!checkUser) {\n            let newUser = {\n                id: newId,\n                email: userEmail,\n                username: userName,\n                password: password,\n                parcels: []\n            };\n            allUsers.push(newUser);\n            return res.status(200).json({\n                message: \"you have been successfully registered\"\n            })\n        }else {\n            return res.status(400).json({\n                message: \"you are already registered\"\n            })\n        }\n    }\n    // this is to get all users\n    static getAllUsers (req, res) {\n        return res.status(200).json({\n            allUsers: allUsers\n        })\n    }\n    // this is to login user\n    static login (req, res) {\n        let userEmail = req.body.email, password = req.body.password;\n        const findUser = helper.findFromDb(allUsers, 'email', userEmail);\n        if (findUser && findUser.password == password) {\n            findUser.loggedIn = true;\n            return res.status(200).json({\n                message: \"successfully logged in\",\n                currentUser: findUser\n            })\n        }else {\n            return res.status(400).json({\n                message: \"error logging in\"\n            })\n        }\n    }\n    // this is to get all parcels by a user\n    static getAllParcelsByUser (req, res) {\n        let userId = req.params.id;\n        const findUser = helper.findFromDb(allUsers, 'id', userId);\n        if (findUser) {\n            res.status(200).json({\n                message: 'successfully fetched all of this user parcels',\n                userParcels: findUser.parcels\n            })\n        }else {\n            res.json({\n                error: \"could not fetch user parcels\"\n            })\n        }\n    }\n}\nexport default usersControllers;"]}