{"version":3,"sources":["../../controllers/usersController.js"],"names":["usersControllers","req","res","body","email","username","password","newId","allUsers","length","id","checkUser","helper","findFromDb","newUser","parcels","push","status","json","message","findUser","loggedIn","currentUser","userId","params","userParcels","error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEMA,gB;;;;;;;;AACJ;iCACoBC,G,EAAKC,G,EAAK;AAAA,sBACUD,IAAIE,IADd;AAAA,UACpBC,KADoB,aACpBA,KADoB;AAAA,UACbC,QADa,aACbA,QADa;AAAA,UACHC,QADG,aACHA,QADG;;AAE5B,UAAMC,QAAQC,kBAASA,kBAASC,MAAT,GAAkB,CAA3B,EAA8BC,EAA9B,GAAmC,CAAjD;AACA,UAAMC,YAAYC,qBAAOC,UAAP,CAAkBL,iBAAlB,EAA4B,OAA5B,EAAqCJ,KAArC,CAAlB;AACA,UAAI,CAACO,SAAL,EAAgB;AACd,YAAMG,UAAU;AACdJ,cAAIH,KADU;AAEdH,sBAFc;AAGdC,4BAHc;AAIdC,4BAJc;AAKdS,mBAAS;AALK,SAAhB;AAOAP,0BAASQ,IAAT,CAAcF,OAAd;AACA,eAAOZ,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS;AADiB,SAArB,CAAP;AAGD;AACD,aAAOjB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD;;;;gCAEmBlB,G,EAAKC,G,EAAK;AAC3B,aAAOA,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BV;AAD0B,OAArB,CAAP;AAGD;AACD;;;;0BAEaP,G,EAAKC,G,EAAK;AAAA,uBACOD,IAAIE,IADX;AAAA,UACbC,KADa,cACbA,KADa;AAAA,UACNE,QADM,cACNA,QADM;;AAErB,UAAMc,WAAWR,qBAAOC,UAAP,CAAkBL,iBAAlB,EAA4B,OAA5B,EAAqCJ,KAArC,CAAjB;AACA,UAAIgB,YAAYA,SAASd,QAAT,IAAqBA,QAArC,EAA+C;AAC7Cc,iBAASC,QAAT,GAAoB,IAApB;AACA,eAAOnB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,wBADiB;AAE1BG,uBAAaF;AAFa,SAArB,CAAP;AAID;AACD,aAAOlB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;AACD;;;;wCAE2BlB,G,EAAKC,G,EAAK;AACnC,UAAMqB,SAAStB,IAAIuB,MAAJ,CAAWd,EAA1B;AACA,UAAMU,WAAWR,qBAAOC,UAAP,CAAkBL,iBAAlB,EAA4B,IAA5B,EAAkCe,MAAlC,CAAjB;AACA,UAAIH,QAAJ,EAAc;AACZlB,YAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,+CADU;AAEnBM,uBAAaL,SAASL;AAFH,SAArB;AAID;AACDb,UAAIgB,IAAJ,CAAS;AACPQ,eAAO;AADA,OAAT;AAGD;;;;;;kBAEY1B,gB","file":"usersController.js","sourcesContent":["import allUsers from '../sampleDatabase/usersdb';\nimport helper from '../helpers/findFromDb';\n\nclass usersControllers {\n  // this is to register a user\n  static registerUser(req, res) {\n    const { email, username, password } = req.body;\n    const newId = allUsers[allUsers.length - 1].id + 1;\n    const checkUser = helper.findFromDb(allUsers, 'email', email);\n    if (!checkUser) {\n      const newUser = {\n        id: newId,\n        email,\n        username,\n        password,\n        parcels: []\n      };\n      allUsers.push(newUser);\n      return res.status(200).json({\n        message: 'you have been successfully registered'\n      });\n    }\n    return res.status(400).json({\n      message: 'you are already registered'\n    });\n  }\n  // this is to get all users\n\n  static getAllUsers(req, res) {\n    return res.status(200).json({\n      allUsers\n    });\n  }\n  // this is to login user\n\n  static login(req, res) {\n    const { email, password } = req.body;\n    const findUser = helper.findFromDb(allUsers, 'email', email);\n    if (findUser && findUser.password == password) {\n      findUser.loggedIn = true;\n      return res.status(200).json({\n        message: 'successfully logged in',\n        currentUser: findUser\n      });\n    }\n    return res.status(400).json({\n      message: 'error logging in'\n    });\n  }\n  // this is to get all parcels by a user\n\n  static getAllParcelsByUser(req, res) {\n    const userId = req.params.id;\n    const findUser = helper.findFromDb(allUsers, 'id', userId);\n    if (findUser) {\n      res.status(200).json({\n        message: 'successfully fetched all of this user parcels',\n        userParcels: findUser.parcels\n      });\n    }\n    res.json({\n      error: 'could not fetch user parcels'\n    });\n  }\n}\nexport default usersControllers;\n"]}