{"version":3,"sources":["../../test/route.test.js"],"names":["expect","chai","use","chaiHttp","describe","it","done","request","app","post","set","send","packageName","destination","pickupLocation","status","price","end","err","res","to","equal","body","message","get","req","be","an","parcels","id","email","username","password","allUsers","put","cancelled","userParcels","delete","allparcel"],"mappings":"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","file":"route.test.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../src/app';\nconst { expect } = chai;\n\nchai.use(chaiHttp);\n\ndescribe(\"post/parcels\", () => {\n    describe(\"get/parcels\", () => {\n        describe(\"get/parcels/:id\", () => {\n            describe(\"post/register\", () => {\n                describe(\"get/users\", () => {\n                    describe(\"put/parcels/status/:id\", () => {\n                        describe(\"put/parcels/:id/cancel\", () => {\n                            describe(\"post/login\", () => {\n                                describe(\"get/users/:id/parcels\", () => {\n                                    describe(\"delete/parcels/:id/delete\", () => {\n                                        it('should create a parcel delivery order', (done) => {\n                                            chai.request(app)\n                                            .post('/api/v1/parcels')\n                                            .set('content-type','application/json')\n                                            .send({\n                                                packageName: \"fridge\",\n                                                destination: \"lagos\",\n                                                pickupLocation: \"iyana ipaja\",\n                                                status: \"enroute\",\n                                                price: \"45000 naira\"\n                                            })\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body.message).to.equal('new parcel created')\n                                                done();\n                                            })\n                                        })\n                                        // testing get all parcels\n                                        it(\"it should get all parcel orders\", (done) => {\n                                            chai.request(app).get(\"/api/v1/parcels\").end((req, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body).to.be.an('object');\n                                                expect(res.body.parcels).to.be.an('array');\n                                                done();\n                                            })\n                                        })\n                                        // testing get a specific parcel\n                                        it('should get a specific parcel order', (done) => {\n                                            const id = 1;\n                                            chai.request(app).get(`/api/v1/parcels/${id}`).end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body).to.be.an('object');\n                                                expect(res.body.message).to.equal(\"the parcel was found\");\n                                                done();\n                                            })\n                                        })\n                                        // testing register a new user\n                                        it('should register a new user', (done) => {\n                                            chai.request(app)\n                                            .post('/api/v1/register')\n                                            .set('content-type', 'application/json')\n                                            .send({\n                                                email: 'dodo@gmail.com',\n                                                username: 'dodo',\n                                                password: 'dodosecret'\n                                            })\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body.message).to.equal('you have been successfully registered');\n                                                done();\n                                            })\n                                        })\n                                        // testing get all users registered\n                                        it('should get all users', (done) => {\n                                            chai.request(app)\n                                            .get('/api/v1/users')\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body.allUsers).to.be.an('array');\n                                                done();\n                                            })\n                                        })\n                                        // for the put request to update parcel order status\n                                        it('should update the status of a parcel order', (done) => {\n                                            const id = 1;\n                                            chai.request(app)\n                                            .put(`/api/v1/parcels/status/${id}`)\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                done();\n                                            })\n                                        })\n                                        // for the put request to cancel a parcel order\n                                        it('should cancel a parcel order', (done) => {\n                                            const id = 1;\n                                            chai.request(app)\n                                            .put(`/api/v1/parcels/${id}/cancel`)\n                                            .set('content-type', 'application/json')\n                                            .send({\n                                                cancelled: true\n                                            })\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body.message).to.equal('this parcel order has been cancelled successfully')\n                                                done();\n                                            })\n                                        })\n                                        // testing the logging in an existing user feature\n                                        it('should log in an existing user', (done) => {\n                                            chai.request(app)\n                                            .post('/api/v1/login')\n                                            .set('content-type', 'application/json')\n                                            .send({\n                                                email: 'dodo@gmail.com',\n                                                password: 'dodosecret'\n                                            })\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body.message).to.equal('successfully logged in');\n                                                done();\n                                            })\n                                        })\n                                        // it should get all parcels of a specific user\n                                        it('should get all parcels for a specific user', (done) => {\n                                            const id = 1;\n                                            chai.request(app)\n                                            .get(`/api/v1/users/${id}/parcels`)\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body.userParcels).to.be.an('array');\n                                                expect(res.body.message).to.equal(\"successfully fetched all of this user parcels\");\n                                                done();\n                                            })\n                                        })\n                                        // this is to delete a specific parcel order\n                                        it('should delete a parcel order', (done) => {\n                                            const id = 1;\n                                            chai.request(app)\n                                            .delete(`/api/v1/parcels/${id}/delete`)\n                                            .end((err, res) => {\n                                                expect(res.status).to.equal(200);\n                                                expect(res.body.message).to.equal(\"parcel successfully deleted\");\n                                                expect(res.body.allparcel).to.be.an('array');\n                                                done();\n                                            })\n                                        })\n                                    })\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    })\n})"]}