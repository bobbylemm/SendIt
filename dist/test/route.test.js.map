{"version":3,"sources":["../../test/route.test.js"],"names":["expect","chai","use","chaiHttp","describe","it","done","request","app","post","set","send","packageName","destination","pickupLocation","status","price","end","err","res","to","equal","body","message","get","req","be","an","parcels","id","email","username","password"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;IACQA,M,GAAWC,c,CAAXD,M;;;AAERC,eAAKC,GAAL,CAASC,kBAAT;;AAEAC,SAAS,cAAT,EAAyB,YAAM;AAC3BA,aAAS,aAAT,EAAwB,YAAM;AAC1BA,iBAAS,iBAAT,EAA4B,YAAM;AAC9BA,qBAAS,eAAT,EAA0B,YAAM;AAC5BC,mBAAG,uCAAH,EAA4C,UAACC,IAAD,EAAU;AAClDL,mCAAKM,OAAL,CAAaC,aAAb,EACCC,IADD,CACM,iBADN,EAECC,GAFD,CAEK,cAFL,EAEoB,kBAFpB,EAGCC,IAHD,CAGM;AACFC,qCAAa,QADX;AAEFC,qCAAa,OAFX;AAGFC,wCAAgB,aAHd;AAIFC,gCAAQ,SAJN;AAKFC,+BAAO;AALL,qBAHN,EAUCC,GAVD,CAUK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfnB,+BAAOmB,IAAIJ,MAAX,EAAmBK,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArB,+BAAOmB,IAAIG,IAAJ,CAASC,OAAhB,EAAyBH,EAAzB,CAA4BC,KAA5B,CAAkC,oBAAlC;AACAf;AACH,qBAdD;AAeH,iBAhBD;AAiBA;AACAD,mBAAG,iCAAH,EAAsC,UAACC,IAAD,EAAU;AAC5CL,mCAAKM,OAAL,CAAaC,aAAb,EAAkBgB,GAAlB,CAAsB,iBAAtB,EAAyCP,GAAzC,CAA6C,UAACQ,GAAD,EAAMN,GAAN,EAAc;AACvDnB,+BAAOmB,IAAIJ,MAAX,EAAmBK,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArB,+BAAOmB,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBM,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA3B,+BAAOmB,IAAIG,IAAJ,CAASM,OAAhB,EAAyBR,EAAzB,CAA4BM,EAA5B,CAA+BC,EAA/B,CAAkC,OAAlC;AACArB;AACH,qBALD;AAMH,iBAPD;AAQA;AACAD,mBAAG,oCAAH,EAAyC,UAACC,IAAD,EAAU;AAC/C,wBAAMuB,KAAK,CAAX;AACA5B,mCAAKM,OAAL,CAAaC,aAAb,EAAkBgB,GAAlB,sBAAyCK,EAAzC,EAA+CZ,GAA/C,CAAmD,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7DnB,+BAAOmB,IAAIJ,MAAX,EAAmBK,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArB,+BAAOmB,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBM,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA3B,+BAAOmB,IAAIG,IAAJ,CAASC,OAAhB,EAAyBH,EAAzB,CAA4BC,KAA5B,CAAkC,sBAAlC;AACAf;AACH,qBALD;AAMH,iBARD;AASA;AACAD,mBAAG,4BAAH,EAAiC,UAACC,IAAD,EAAU;AACvCL,mCAAKM,OAAL,CAAaC,aAAb,EACCC,IADD,CACM,kBADN,EAECC,GAFD,CAEK,cAFL,EAEqB,kBAFrB,EAGCC,IAHD,CAGM;AACFmB,+BAAO,gBADL;AAEFC,kCAAU,MAFR;AAGFC,kCAAU;AAHR,qBAHN,EAQCf,GARD,CAQK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfnB,+BAAOmB,IAAIJ,MAAX,EAAmBK,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArB,+BAAOmB,IAAIG,IAAJ,CAASC,OAAhB,EAAyBH,EAAzB,CAA4BC,KAA5B,CAAkC,uCAAlC;AACAf;AACH,qBAZD;AAaH,iBAdD;AAeH,aArDD;AAsDH,SAvDD;AAwDH,KAzDD;AA0DH,CA3DD","file":"route.test.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../src/app';\nconst { expect } = chai;\n\nchai.use(chaiHttp);\n\ndescribe(\"post/parcels\", () => {\n    describe(\"get/parcels\", () => {\n        describe(\"get/parcels/:id\", () => {\n            describe(\"post/register\", () => {\n                it('should create a parcel delivery order', (done) => {\n                    chai.request(app)\n                    .post('/api/v1/parcels')\n                    .set('content-type','application/json')\n                    .send({\n                        packageName: \"fridge\",\n                        destination: \"lagos\",\n                        pickupLocation: \"iyana ipaja\",\n                        status: \"enroute\",\n                        price: \"45000 naira\"\n                    })\n                    .end((err, res) => {\n                        expect(res.status).to.equal(200);\n                        expect(res.body.message).to.equal('new parcel created')\n                        done();\n                    })\n                })\n                // testing get all parcels\n                it(\"it should get all parcel orders\", (done) => {\n                    chai.request(app).get(\"/api/v1/parcels\").end((req, res) => {\n                        expect(res.status).to.equal(200);\n                        expect(res.body).to.be.an('object');\n                        expect(res.body.parcels).to.be.an('array');\n                        done();\n                    })\n                })\n                // testing get a specific parcel\n                it('should get a specific parcel order', (done) => {\n                    const id = 1;\n                    chai.request(app).get(`/api/v1/parcels/${id}`).end((err, res) => {\n                        expect(res.status).to.equal(200);\n                        expect(res.body).to.be.an('object');\n                        expect(res.body.message).to.equal(\"the parcel was found\");\n                        done();\n                    })\n                })\n                // it should register a new user\n                it('should register a new user', (done) => {\n                    chai.request(app)\n                    .post('/api/v1/register')\n                    .set('content-type', 'application/json')\n                    .send({\n                        email: 'dodo@gmail.com',\n                        username: 'dodo',\n                        password: 'dodosecret'\n                    })\n                    .end((err, res) => {\n                        expect(res.status).to.equal(200);\n                        expect(res.body.message).to.equal('you have been successfully registered');\n                        done();\n                    })\n                })\n            })\n        })\n    })\n})"]}